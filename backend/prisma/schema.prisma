// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Style {
  id            Int        @id @default(autoincrement())
  thumbnail     String
  title         String
  content       String?
  categories    Json?
  viewCount     Int        @default(0)
  curationCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Curation      Curation[]
  Image         Image[]
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  tags          Tag[]
}

model Curation {
  id                Int    @id @default(autoincrement())
  content           String
  trendy            Int
  personality       Int
  practicality      Int
  costEffectiveness Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  style   Style @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId Int

  comments Comment?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([styleId, userId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  curation   Curation @relation(fields: [curationId], references: [id], onDelete: Cascade)
  curationId Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  style   Style? @relation(fields: [styleId], references: [id], onDelete: Cascade)
  styleId Int?

  user User?
}

model User {
  id           Int        @id @default(autoincrement())
  profileImage String?
  nickname     String     @unique
  password     String
  email        String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Style        Style[]     
  Curation     Curation[]
  Comment      Comment[]
  image        Image?     @relation(fields: [imageId], references: [id])
  imageId      Int?       @unique
}

model Tag {
  id              Int           @id @default(autoincrement())
  tagname         String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  styles          Style[]
  totalUsageCount Int           @default(0)
  popularityScore Float         @default(0.0)
  usageLogs       TagUsageLog[]
}

model TagUsageLog {
  id        Int      @id @default(autoincrement())
  tagId     Int
  timestamp DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id])
}
